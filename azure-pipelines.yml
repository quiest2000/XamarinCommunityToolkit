# See available software and versions on hosted agents here: https://docs.microsoft.com/azure/devops/pipelines/agents/hosted
variables:
  CurrentSemanticVersionBase: '1.0.0'
  PreviewNumber: $[counter(variables['CurrentSemanticVersionBase'], 1001)]
  CurrentSemanticVersion: '$(CurrentSemanticVersionBase)-preview$(PreviewNumber)'
  NugetPackageVersion: '$(CurrentSemanticVersion)'
  MONO_VERSION: 6_4_0
  XCODE_VERSION: 11.4
  NETCORE_VERSION: '3.1.x'
  NETCORE_TEST_VERSION: '3.1.x'
  RunPoliCheck: 'false'
  PathToCsproj: 'src/CommunityToolkit/Xamarin.CommunityToolkit/Xamarin.CommunityToolkit.csproj'
  PathToMarkupCsproj: 'src/Markup/Xamarin.CommunityToolkit.Markup/Xamarin.CommunityToolkit.Markup.csproj'

resources:
  repositories:
    - repository: xamarin-templates
      type: github
      name: xamarin/yaml-templates
      endpoint: xamarin

trigger:
  branches:
    include:
    - main
  tags:
    include:
    - '*'
  paths:
    exclude:
    - README.md

pr:
  autoCancel: false
  branches:
    include:
    - main

schedules:
- cron: "0 0 * * *"
  displayName: Daily midnight build
  branches:
    include:
    - main

jobs:
  - job: build_windows
    displayName: Build Windows Library
    pool:
      vmImage: windows-2019
    steps:
      # if this is a tagged build, then update the version number
      - powershell: |
          $buildSourceBranch = "$(Build.SourceBranch)"
          $tagVersion = $buildSourceBranch.Substring($buildSourceBranch.LastIndexOf("/") + 1)
          Write-Host("Branch = $buildSourceBranch, Version = $tagVersion");
          Write-Host ("##vso[task.setvariable variable=NugetPackageVersion;]$tagVersion")
        displayName: Set NuGet Version to Tag Number
        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
      # restore, build and pack the packages
      - task: MSBuild@1
        displayName: Build Solution
        inputs:
          solution: $(PathToCsproj)
          configuration: Release
          msbuildArguments: '/restore /t:Build /p:ContinuousIntegrationBuild=true /p:Deterministic=false'
      - task: MSBuild@1
        displayName: Pack NuGets
        inputs:
          solution: $(PathToCsproj)
          configuration: Release
          msbuildArguments: '/t:Pack /p:PackageVersion=$(NugetPackageVersion) /p:PackageOutputPath="$(Build.ArtifactStagingDirectory)/nuget"'
      - task: MSBuild@1
        displayName: Build Markup Project
        inputs:
          solution: $(PathToMarkupCsproj)
          configuration: Release
          msbuildArguments: '/restore /t:Build /p:ContinuousIntegrationBuild=true /p:Deterministic=false'
      - task: MSBuild@1
        displayName: Pack Markup NuGet
        inputs:
          solution: $(PathToMarkupCsproj)
          configuration: Release
          msbuildArguments: '/t:Pack /p:PackageVersion=$(NugetPackageVersion) /p:PackageOutputPath="$(Build.ArtifactStagingDirectory)/nuget"'
#      - task: DotNetCoreCLI@2
#        displayName: Publish to GitHub NuGet Packages
#        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/main'))
#        inputs:
#          command: 'custom'
#          custom: 'nuget'
#          arguments: 'push --source https://nuget.pkg.github.com/xamarin/index.json --api-key $(GitHub.NuGet.Token) "$(Build.ArtifactStagingDirectory)\nuget\*.nupkg"'
      - task: DotNetCoreCLI@2
        displayName: Run Tests
        inputs:
          command: test
          projects: '**/*.UnitTests.csproj'
          arguments: '--configuration Release --collect "Code coverage"'
      # publish the packages
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Unsigned NuGets'
        inputs:
          artifactName: nuget
          pathToPublish: '$(Build.ArtifactStagingDirectory)/nuget'
      # make sure we are following the rules, but only on the main build
      - ${{ if eq(variables['System.TeamProject'], 'devdiv') }}:
        - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
          condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
          displayName: Component Detection - Log
          inputs:
            scanType: LogOnly
        - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
          condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
          displayName: Component Detection - Report
        - task: securedevelopmentteam.vss-secure-development-tools.build-task-policheck.PoliCheck@1
          condition: eq(variables['RunPoliCheck'], 'true')
          displayName: 'PoliCheck'
          inputs:
            targetType: F

  - job: build_macos
    displayName: Build macOS Library
    pool:
      vmImage: macos-10.15
    steps:
      # if this is a tagged build, then update the version number
      - powershell: |
          $buildSourceBranch = "$(Build.SourceBranch)"
          $tagVersion = $buildSourceBranch.Substring($buildSourceBranch.LastIndexOf("/") + 1)
          Write-Host("Branch = $buildSourceBranch, Version = $tagVersion");
          Write-Host ("##vso[task.setvariable variable=NugetPackageVersion;]$tagVersion")
        displayName: Set NuGet Version to Tag Number
        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
      # make sure to select the correct Xamarin and mono
      - bash: sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh $(MONO_VERSION)
        displayName: Switch to the latest Xamarin SDK
      - bash: echo '##vso[task.setvariable variable=MD_APPLE_SDK_ROOT;]'/Applications/Xcode_$(XCODE_VERSION).app;sudo xcode-select --switch /Applications/Xcode_$(XCODE_VERSION).app/Contents/Developer
        displayName: Switch to the latest Xcode
      # restore, build and pack the packages
      - task: UseDotNet@2
        displayName: 'Use .Net Core sdk'
        inputs:
          version: $(NETCORE_VERSION)
          includePreviewVersions: false
      - task: UseDotNet@2
        displayName: 'Use .Net Core sdk'
        inputs:
          version: $(NETCORE_TEST_VERSION)
          includePreviewVersions: false
      - task: MSBuild@1
        displayName: Build Solution
        inputs:
          solution: $(PathToCsproj)
          configuration: Release
          msbuildArguments: '/restore /t:Build /p:ContinuousIntegrationBuild=true /p:Deterministic=false'
      - task: MSBuild@1
        displayName: Pack NuGets
        inputs:
          solution: $(PathToCsproj)
          configuration: Release
          msbuildArguments: '/t:Pack /p:PackageVersion=$(NugetPackageVersion) /p:PackageOutputPath="$(Build.ArtifactStagingDirectory)/nuget"'

    # only sign the packages when running on Windows, and using the private server which has the certificates
  - ${{ if eq(variables['System.TeamProject'], 'devdiv') }}:
    - job: signing
      displayName: Signing NuGets
      dependsOn: build_windows
      pool:
        name: VSEng-XamarinCustom
        demands:
          - corpnet
      condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
      steps:
        # don't checkout code and sign the packages
        - checkout: none
        - template: sign-artifacts.yml@xamarin-templates
          parameters:
            targetFolder: '$(Build.ArtifactStagingDirectory)/signed'
        # publish the signed packages
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Signed NuGets'
          inputs:
            artifactName: nuget-signed
            pathToPublish: '$(Build.ArtifactStagingDirectory)/signed'